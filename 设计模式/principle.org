#+title: 设计模式的基本原则
* 设计模式的基本原则

** 编目准则
   ~创建型~:与对象的创建有关
   ~结构型~:处理类或对象的组合
   ~行为型~:对类或对象的交互及职责分配进行描述

| 创建型 | 结构型 | 行为型 |
|--------+--------+---|
|        |        |   |
|        |        |   |

** 考虑因素
   封装 粒度 依赖关系 灵活性 性能 演化 复用

** 对接口编程,而不是对实现编程
   好处:客户无须知道他们使用对象的特定类型,只须对象有客户所期望的接口.
   客户无须知道他们使用的对象是用什么类来实现的,他们只须知道定义接口的抽象类.
   
** 优先使用对象组合,而不是类继承
*** 类继承和组合的异同
    |        | 定义     | 依赖关系     |
    |--------+----------+--------------|
    | 类继承 | 静态定义 | 子父类强依赖 |
    | 组合   | 动态定义 | 较少依赖     |

** 需求变化的预见性
   获取最大复用的关键在于对新需求和已有需求发生变化时的预见性.也就是说需求要迎合
   软件未来发展的变化.

** 导致重新设计的一般原因
*** 指定类来创建对象
    在创建对象时指定类名将使你受特定实现的约束而不是特定接口的约束。这会使未来的
    变化更复杂。要避免这种情况,应该间接地创建对象.
    
    意思是如果根据接口来创建对象的话,一旦需要增加新的类,不需要改动原有代码,只需
    要让新的对象实现相应的接口即可允许原有的代码使用新的类了.

    这也是为什么应该考虑 ~面向接口编程~ 而不是面向实现的类编程

*** 对特殊操作的依赖
    当你为请求指定一个特殊的操作时,完成该请求的方式就固定下来了.为避免把请求代码
    写死,你将可以在编译时刻或运行时刻很方便地改变响应请求的方法.

**** TODO 没看懂
     - State "TODO"       from              [2020-04-14 二 15:47]

*** 对硬件和软件平台的依赖
    平台上是不同的。依赖于特定平台的软件将很难移植到其他平台上,甚至都很难跟上本
    地平台的更新.所以设计系统时限制其平台相关性就很重要了.

*** 对对象表示或实现的依赖
    知道对象怎样表示、保存、定位或实现的客户在对象发生变化时可能也需要变化.对客
    户隐藏这些信息能阻止连锁变化.

*** 算法依赖
    算法在开发和复用时常常被扩展、优化和替代。依赖于某个特定算法的对象在算法发生
    变化时不得不变化.因此有可能发生变化的算法应该被孤立起来.

*** 紧耦合
    紧耦合的类很难独立地被复用,因为它们是互相依赖的。紧耦合产生单块的系统,要改变
    或删掉一个类,你必须理解和改变其他许多类。这样的系统是一个很难学习、移植和维
    护的密集体.

    松散耦合提高了一个类本身被复用的可能性,并且系统更易于学习、移植、修改和扩展,
    设计模式使用抽象耦合和分层技术来提高系统的松散耦合性.

*** 通过生成子类来扩充功能
    通常很难通过定义子类来定制对象。每一个新类都有固定的实现开销(初始化、终止处
    理等)。定义子类还需要对父类有深入的了解。如,重定义一个操作可能需要重定义其他
    操作。一个被重定义的操作可能需要调用继承下来的操作。并且子类方法会导致类爆
    炸,因为即使对于一个简单的扩充,你也不得不引入许多新的子类.一般的对象组合技术
    和具体的委托技术,是继承之外组合对象行为的另一种灵活方法。新的功能可以通过以
    新的方式组合已有对象,而不是通过定义已存在类的子类的方式加到应用中去。另一方
    面,过多使用对象组合会使设计难于理解。许多设计模式产生的设计中,你可以定义一
    个子类,且将它的实例和已存在实例进行组合来引入定制的功能。

*** 不能方便地对类进行修改
    有时你不得不改变一个难以修改的类。也许你需要源代码而又没有(对于商业类库就有
    这种情况),或者可能对类的任何改变会要求修改许多已存在的其他子类。设计模式提
    供在这些情况下对类进行修改的方法。

** 框架
   我理解的框架就是多种设计模式在某一领域的具体应用.比如 web 框架/爬虫框架/分布式
   框架等等,这些框架里面包含了多种设计模式,但只能作用于某一特定的领域,正好也符号
   以下三个设计模式与框架区别的定义.
*** 设计模式比框架更抽象
*** 设计模式是比框架更小的体系结构元素
*** 框架比设计模式更加特例化

** 怎样选择设计模式
*** 考虑设计模式是怎样解决设计问题的
*** 浏览模式的意图部分
*** 研究模式怎么互相关联
*** 研究目的相似的模式
*** 检查重新设计的原因
*** 考虑你的设计中哪些是可变的

** 怎样使用设计模式
*** 大致浏览一遍设计模式
*** 研究结构部分/参与者部分/协作部分
*** 看代码示例部分
*** 定义类
*** 定义模式中专用于应用的操作名称
*** 实现执行模式中责任和协作的操作
